name: CI/CD to EC2 via GHCR

on:
  push:
    branches: [ "main" ]

concurrency:
  group: deploy-main
  cancel-in-progress: true

permissions:
  contents: read
  packages: write

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    outputs:
      image_sha: ${{ steps.meta.outputs.image_sha }}   # ← outputs로 노출
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ secrets.GHCR_USERNAME }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Prepare image tags
        id: meta                                 # ← id 부여
        run: |
          IMAGE_BASE="ghcr.io/${{ secrets.GHCR_USERNAME }}/cnu-informate-backend"
          echo "image_sha=${GITHUB_SHA}" >> $GITHUB_OUTPUT
          echo "IMAGE_BASE=${IMAGE_BASE}" >> $GITHUB_ENV

      - name: Build & Push image
        run: |
          docker build --pull \
            -t "${{ env.IMAGE_BASE }}:${{ steps.meta.outputs.image_sha }}" \
            -t "${{ env.IMAGE_BASE }}:latest" .
          docker push "${{ env.IMAGE_BASE }}:${{ steps.meta.outputs.image_sha }}"
          docker push "${{ env.IMAGE_BASE }}:latest"

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: SSH to EC2 and deploy with compose
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          port: 22
          debug: true
          script_stop: true
          # envs: 로 전달하려면, 아래 env 블록과 이름이 일치해야 함
          envs: GHCR_USERNAME,GHCR_TOKEN,IMAGE_SHA
          script: |
            set -euo pipefail
            echo "${GHCR_TOKEN}" | docker login ghcr.io -u "${GHCR_USERNAME}" --password-stdin
            cd ~/apps/cnu-informate

            # compose.yml의 서비스명이 'app'이 맞는지 꼭 확인!
            # 방법1) compose가 latest를 쓰는 경우:
            docker compose pull app
            docker compose up -d app

            # 방법2) compose에서 태그 변수를 쓰는 경우(권장):
            # IMAGE_TAG=${IMAGE_SHA} docker compose up -d --pull always app

            docker image prune -f
        env:
          GHCR_USERNAME: ${{ secrets.GHCR_USERNAME }}
          GHCR_TOKEN: ${{ secrets.GHCR_TOKEN }}
          IMAGE_SHA: ${{ needs.build-and-push.outputs.image_sha }}   # ← 여기서 주입
